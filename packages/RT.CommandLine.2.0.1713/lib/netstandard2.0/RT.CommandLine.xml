<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RT.CommandLine</name>
    </assembly>
    <members>
        <member name="T:RT.CommandLine.CommandLineParser">
            <summary>
                Implements a command-line parser that can turn the commands and options specified by the user on the command line
                into a strongly-typed instance of a specific class. See remarks for more details.</summary>
            <remarks>
                <para>
                    The following conditions must be met by the class wishing to receive the options and parameters:</para>
                <list type="bullet">
                    <item><description>
                        It must be a reference type (a class), must have <see cref="T:RT.CommandLine.CommandLineAttribute"/>, and it must have a
                        parameterless constructor (unless it has subcommands, see below).</description></item>
                    <item><description>
                        <para>
                            Every field in the class must have one of the following custom attributes:</para>
                        <list type="bullet">
                            <item><description>
                                <see cref="T:RT.CommandLine.IsPositionalAttribute"/> (allowed for all supported types except <c>bool</c>) —
                                specifies that the parameter is positional; the user specifies the value(s) in place without an
                                option preceding it.</description></item>
                            <item><description>
                                <see cref="T:RT.CommandLine.OptionAttribute"/> (allowed for all supported types) — specifies that the parameter
                                invoked by an option, e.g. <c>-x</c>, which may or may not be followed by a value. (This does not
                                imply that the parameter is necessarily optional.)</description></item>
                            <item><description>
                                <see cref="T:RT.CommandLine.EnumOptionsAttribute"/> (allowed for enum types only) — specifies that the parameter
                                can be invoked by one of several options, which are specified on the enum values in the enum type.</description></item>
                            <item><description>
                                <see cref="T:RT.CommandLine.IgnoreAttribute"/> — specifies that <see cref="T:RT.CommandLine.CommandLineParser"/> shall completely
                                ignore the field.</description></item></list></description></item>
                    <item><description>
                        <para>
                            Each field may optionally have any of the following custom attributes:</para>
                        <list type="bullet">
                            <item><description>
                                <see cref="T:RT.CommandLine.IsMandatoryAttribute"/> (allowed for all supported types except <c>bool</c>) —
                                specifies that the parameter must be specified by the user. For a <c>string[]</c> field, it means
                                that at least one value must be specified.</description></item>
                            <item><description>
                                <see cref="T:RT.CommandLine.UndocumentedAttribute"/> — specifies that the option or command does not appear in the
                                help screen generated by CommandLineParser.</description></item></list></description></item>
                    <item><description>
                        <para>
                            Each field in the class must be of one of the following types:</para>
                        <list type="bullet">
                            <item><description>
                                <c>string</c>, any integer type, <c>float</c>, <c>double</c>, or any nullable version of these.
                                The field can be positional (<see cref="T:RT.CommandLine.IsPositionalAttribute"/>) or not (<see
                                cref="T:RT.CommandLine.OptionAttribute"/>).</description></item>
                            <item><description>
                                <c>string[]</c>. The field can be positional (<see cref="T:RT.CommandLine.IsPositionalAttribute"/>) or not (<see
                                cref="T:RT.CommandLine.OptionAttribute"/>), but if it is positional, it must be the last positional parameter.</description></item>
                            <item><description>
                                <c>bool</c>. The field must have an <see cref="T:RT.CommandLine.OptionAttribute"/> and cannot be positional or
                                mandatory.</description></item>
                            <item><description>
                                <para>
                                    Any enum type. There are three ways that enum types can be used. To explain these, the
                                    following enum type declaraction is used as an example:</para>
                                <code>
                                    enum OutputFormat { PlainText, Xml }</code>
                                <list type="bullet">
                                    <item><description>
                                        <para>
                                            <see cref="T:RT.CommandLine.IsPositionalAttribute"/> — The user can specify a single parameter (e.g.
                                            <c>plain</c> or <c>xml</c>) to select an enum value. Every value in the enum type must
                                            have a <see cref="T:RT.CommandLine.CommandNameAttribute"/> to specify the name by which that enum value
                                            is selected:</para>
                                        <code>
                                            enum OutputFormat
                                            {
                                                [CommandName("plain")]
                                                PlainText,
                                                [CommandName("xml")]
                                                Xml
                                            }</code></description></item>
                                    <item><description>
                                        <see cref="T:RT.CommandLine.OptionAttribute"/> — The user can select an enum value by specifying an option
                                        followed by a parameter that identifies the enum value (e.g. <c>-f plain</c> or <c>-f
                                        xml</c>). As above, every value in the enum type must have a <see
                                        cref="T:RT.CommandLine.CommandNameAttribute"/> to specify the name by which that enum value is selected.</description></item>
                                    <item><description>
                                        <para>
                                            <see cref="T:RT.CommandLine.EnumOptionsAttribute"/> — The user can select an enum value by specifying
                                            just an option (e.g. <c>-p</c> or <c>-x</c>). Every value in the enum type must have
                                            an <see cref="T:RT.CommandLine.OptionAttribute"/> to specify the option by which that enum value is
                                            selected:</para>
                                        <code>
                                            enum OutputFormat
                                            {
                                                [Option("-p", "--plain")]
                                                PlainText,
                                                [Option("-x", "--xml")]
                                                Xml
                                            }</code>
                                        <para>
                                            A parameter on the attribute determines whether the user is allowed to specify only
                                            one enum value or multiple (which will be combined using bitwise or).</para></description></item>
                                    <item><description>
                                        If the field is optional, the enum value that corresponds to the field’s initial (default)
                                        value may omit the <see cref="T:RT.CommandLine.CommandNameAttribute"/> or <see cref="T:RT.CommandLine.OptionAttribute"/>.</description></item></list></description></item></list></description></item>
                    <item><description>
                        <para>
                            Every field must have documentation or be explicitly marked with <see cref="T:RT.CommandLine.UndocumentedAttribute"/>
                            (except for fields that use <see cref="T:RT.CommandLine.EnumOptionsAttribute"/> or <see cref="T:RT.CommandLine.IgnoreAttribute"/>). For
                            every field whose type is an enum type, the values in the enum type must also have documentation or
                            <see cref="T:RT.CommandLine.UndocumentedAttribute"/>, except for the enum value that corresponds to the field’s default
                            value if the field is not mandatory.</para>
                        <para>
                            Documentation is provided in one of the following ways:</para>
                        <list type="bullet">
                            <item><description>
                                Monolingual, translation-agnostic (unlocalizable) applications use the <see
                                cref="T:RT.CommandLine.DocumentationAttribute"/> to specify documentation directly.</description></item>
                            <item><description>
                                <para>
                                    Translatable applications must declare methods with the following signature:</para>
                                <code>
                                    static string FieldNameDoc(Translation)</code>
                                <para>
                                    The first parameter must be of the same type as the object passed in for the
                                    <c>applicationTr</c> parameter of <see cref="M:RT.CommandLine.CommandLineParser.Parse``1(System.String[],RT.Lingo.TranslationBase,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})"/>. The name of the method is the name of
                                    the field or enum value followed by <c>Doc</c>. The return value is the translated string.</para></description></item></list></description></item>
                    <item><description>
                        <see cref="T:RT.CommandLine.IsPositionalAttribute"/> and <see cref="T:RT.CommandLine.IsMandatoryAttribute"/> can be used together. However,
                        a positional field can only be made mandatory if all the positional fields preceding it are also
                        mandatory.</description></item></list>
                <para>
                    Subcommands can be implemented by using derived classes. For example, in order to allow the user to invoke
                    commands of the following form:</para>
                <code>
                    MyTool.exe create new_item
                    MyTool.exe rename old_name new_name</code>
                <para>
                    you would declare the following classes:</para>
                <code>
                    [CommandLine]
                    abstract class CmdBase { }
                    
                    [CommandName("create")]
                    sealed class CmdCreate : CmdBase
                    {
                        [IsPositional, IsMandatory]
                        public string ItemName;
                    }
                    
                    [CommandName("rename")]
                    sealed class CmdRename : CmdBase
                    {
                        [IsPositional, IsMandatory]
                        public string OldName;
                        [IsPositional, IsMandatory]
                        public string NewName;
                    }</code>
                <para>
                    In this example, we have omitted the documentation attributes, but in practice they would be required. The
                    following points are of note here:</para>
                <list type="bullet">
                    <item><description>
                        <para>
                            The class <c>CmdBase</c> is abstract to indicate that the subcommand is mandatory. The class could be
                            made non-abstract to indicate that the subcommand is optional.</para></description></item>
                    <item><description>
                        <para>
                            The class <c>CmdBase</c> does not need to have a parameterless constructor because only
                            <c>CmdCreate</c> and <c>CmdRename</c> would actually be instantiated by CommandLineParser. However, if
                            it were non-abstract, it would need a parameterless constructor.</para></description></item>
                    <item><description>
                        <para>
                            Parameters that pertain to all subcommands can be added in <c>CmdBase</c> and the user would specify
                            those before the command name.</para></description></item>
                    <item><description>
                        <para>
                            You can have any arbitrary multi-level class hierarchy. Only classes marked with <see
                            cref="T:RT.CommandLine.CommandNameAttribute"/> become subcommands.</para></description></item></list></remarks>
        </member>
        <member name="M:RT.CommandLine.CommandLineParser.Parse``1(System.String[],RT.Lingo.TranslationBase,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})">
            <summary>
                Parses the specified command-line arguments into an instance of the specified type. See the remarks section of
                the documentation for <see cref="T:RT.CommandLine.CommandLineParser"/> for features and limitations.</summary>
            <typeparam name="TArgs">
                The class containing the fields and attributes which define the command-line syntax.</typeparam>
            <param name="args">
                The command-line arguments to be parsed.</param>
            <param name="applicationTr">
                Specifies the application’s translation object which contains the localised strings that document the
                command-line options and commands. This object is passed in to the <c>FieldNameDoc</c> methods described in
                the documentation for <see cref="T:RT.CommandLine.CommandLineParser"/>. This should be <c>null</c> for monoligual applications.</param>
            <param name="helpProcessor">
                Specifies a callback which is invoked on every documentation string retrieved from the <see
                cref="T:RT.CommandLine.DocumentationAttribute"/>s to generate the help text. This callback can modify the text arbitrarily.</param>
            <returns>
                An instance of the class <typeparamref name="TArgs"/> containing the options and parameters specified by the
                user on the command line.</returns>
        </member>
        <member name="M:RT.CommandLine.CommandLineParser.ParseOrWriteUsageToConsole``1(System.String[],RT.Lingo.TranslationBase,RT.CommandLine.Translation,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})">
            <summary>
                Parses the specified command-line arguments into an instance of the specified type. In case of failure, prints
                usage information to the console and returns <c>default(TArgs)</c>. See the remarks section of the
                documentation for <see cref="T:RT.CommandLine.CommandLineParser"/> for features and limitations.</summary>
            <typeparam name="TArgs">
                The class containing the fields and attributes which define the command-line syntax.</typeparam>
            <param name="args">
                The command-line arguments to be parsed.</param>
            <param name="applicationTr">
                Specifies the application’s translation object which contains the localized strings that document the
                command-line options and commands. This object is passed in to the FieldNameDoc() methods described in the
                documentation for <see cref="T:RT.CommandLine.CommandLineParser"/>. This should be null for monoligual applications.</param>
            <param name="cmdLineTr">
                Specifies a translation object that contains the localized strings for CommandLineParser’s own text.</param>
            <param name="helpProcessor">
                Specifies a callback which is invoked on every documentation string retrieved from the <see
                cref="T:RT.CommandLine.DocumentationAttribute"/>s to generate the help text. This callback can modify the text arbitrarily.</param>
            <returns>
                An instance of the class <typeparamref name="TArgs"/> containing the options and parameters specified by the
                user on the command line.</returns>
        </member>
        <member name="M:RT.CommandLine.CommandLineParser.PostBuildStep``1(RT.PostBuild.IPostBuildReporter,System.Type)">
            <summary>
                Performs safety checks to ensure that the structure of your command-line syntax defining class is valid
                according to the criteria laid out in the documentation of <see cref="T:RT.CommandLine.CommandLineParser"/>. Run this method as
                a post-build step to ensure reliability of execution. For an example of use, see <see
                cref="M:RT.PostBuild.PostBuildChecker.RunPostBuildChecks(System.String,System.Reflection.Assembly[])"/>.</summary>
            <typeparam name="TArgs">
                The class containing the fields and attributes which define the command-line syntax.</typeparam>
            <param name="rep">
                Object to report post-build errors to.</param>
            <param name="applicationTrType">
                The type of the translation object, derived from <see cref="T:RT.Lingo.TranslationBase"/>, which would be passed in for
                the “applicationTr” parameter of <see cref="M:RT.CommandLine.CommandLineParser.Parse``1(System.String[],RT.Lingo.TranslationBase,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})"/> at normal run-time.</param>
        </member>
        <member name="M:RT.CommandLine.CommandLineParser.Colorize(RT.Util.RhoElement)">
            <summary>
                Converts the specified <see cref="T:RT.Util.RhoML"/> parse tree into a console colored string according to
                CommandLineParser-specific rules. This method is used to convert <see cref="T:RT.CommandLine.DocumentationRhoMLAttribute"/>
                documentation into colored text. See Remarks.</summary>
            <remarks>
                A number of named tags have a special meaning. Any tag named after a value of <see cref="T:System.ConsoleColor"/>
                results in that color. Both spellings of gray/grey are supported. The {h}...{} named tag stands for the
                highlight color (white). {nowrap}...{} can be placed around text that must not be broken into multiple lines
                by the word wrapper. The tags {field}, {option}, {command} and {enum} are used to refer to the corresponding
                command line syntax element, and is highlighted the same way the documentation generator would highlight
                references to these entities.</remarks>
        </member>
        <member name="M:RT.CommandLine.CommandLineParser.Colorize(RT.Util.EggsNode)">
            <summary>
                Converts the specified <see cref="T:RT.Util.EggsML"/> parse tree into a console colored string using the rules described
                in <see cref="M:RT.Util.EggsNode.ToConsoleColoredStringWordWrap(System.Int32,System.Int32)"/>. This method is used to convert <see
                cref="T:RT.CommandLine.DocumentationEggsMLAttribute"/> documentation into colored text, as well as any documentation using the
                legacy <see cref="T:RT.CommandLine.DocumentationLiteralAttribute"/>.</summary>
        </member>
        <member name="T:RT.CommandLine.ICommandLineValidatable">
            <summary>
                Contains methods to validate a set of parameters passed by the user on the command-line and parsed by <see
                cref="T:RT.CommandLine.CommandLineParser"/>. Use this class only in monolingual (unlocalisable) applications. Use <see
                cref="T:RT.CommandLine.ICommandLineValidatable`1"/> otherwise.</summary>
        </member>
        <member name="M:RT.CommandLine.ICommandLineValidatable.Validate">
            <summary>
                When overridden in a derived class, returns an error message if the contents of the class are invalid,
                otherwise returns null.</summary>
        </member>
        <member name="T:RT.CommandLine.ICommandLineValidatable`1">
            <summary>
                Contains methods to validate a set of parameters passed by the user on the command-line and parsed by <see
                cref="T:RT.CommandLine.CommandLineParser"/>.</summary>
            <typeparam name="TTranslation">
                A translation-string class containing the error messages that can occur during validation.</typeparam>
        </member>
        <member name="M:RT.CommandLine.ICommandLineValidatable`1.Validate(`0)">
            <summary>
                When implemented in a class, returns an error message if the contents of the class are invalid, otherwise
                returns null.</summary>
            <param name="tr">
                Contains translations for the messages that may occur during validation.</param>
        </member>
        <member name="T:RT.CommandLine.TranslationGroup">
            <summary>Groups the translatable strings in the <see cref="T:RT.CommandLine.Translation"/> class into categories.</summary>
        </member>
        <member name="F:RT.CommandLine.TranslationGroup.CommandLineError">
            <summary>Error messages produced by the command-line parser.</summary>
        </member>
        <member name="F:RT.CommandLine.TranslationGroup.CommandLineHelp">
            <summary>Messages used by the command-line parser to produce help pages.</summary>
        </member>
        <member name="T:RT.CommandLine.Translation">
            <summary>Contains translatable strings pertaining to the command-line parser, including error messages and usage help.</summary>
        </member>
        <member name="T:RT.CommandLine.CommandLineAttribute">
            <summary>Use this on a class to specify that it represent a command-line syntax.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandLineAttribute.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.CommandNameAttribute">
            <summary>
                Use this on a derived class or on an enum value to specify the command the user must use to invoke that class or
                enum value.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandNameAttribute.#ctor(System.String[])">
            <summary>
                Constructor.</summary>
            <param name="names">
                The command(s) the user can specify to invoke this class or enum value.</param>
        </member>
        <member name="P:RT.CommandLine.CommandNameAttribute.Names">
            <summary>The command the user can specify to invoke this class.</summary>
        </member>
        <member name="T:RT.CommandLine.IsMandatoryAttribute">
            <summary>Use this to specify that a command-line parameter is mandatory.</summary>
        </member>
        <member name="M:RT.CommandLine.IsMandatoryAttribute.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.IsPositionalAttribute">
            <summary>
                Use this to specify that a command-line parameter is positional, i.e. is not invoked by an option that starts with
                "-".</summary>
        </member>
        <member name="M:RT.CommandLine.IsPositionalAttribute.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.OptionAttribute">
            <summary>
                Use this to specify that a field in a class can be specified on the command line using an option, for example
                <c>-a</c> or <c>--option-name</c>. The option name(s) MUST begin with a dash (<c>-</c>).</summary>
        </member>
        <member name="M:RT.CommandLine.OptionAttribute.#ctor(System.String[])">
            <summary>
                Constructor.</summary>
            <param name="names">
                The name of the option. Specify several names as synonyms if required.</param>
        </member>
        <member name="P:RT.CommandLine.OptionAttribute.Names">
            <summary>All of the names of the option.</summary>
        </member>
        <member name="T:RT.CommandLine.DocumentationAttribute">
            <summary>
                Use this attribute to link a command-line option or command with the help text that describes (documents) it.
                Suitable for single-language applications only. See Remarks.</summary>
            <remarks>
                This attribute specifies the documentation in plain text. All characters are printed exactly as specified. You may
                wish to use <see cref="T:RT.CommandLine.DocumentationRhoMLAttribute"/> to specify documentation with special markup for
                command-line-related concepts, as well as <see cref="T:RT.CommandLine.DocumentationEggsMLAttribute"/> for an alternative markup
                language without command-line specific concepts.</remarks>
        </member>
        <member name="P:RT.CommandLine.DocumentationAttribute.Text">
            <summary>
                Gets the console-colored documentation string. Note that this property may throw if the text couldn't be
                parsed where applicable.</summary>
        </member>
        <member name="P:RT.CommandLine.DocumentationAttribute.OriginalFormat">
            <summary>Gets a string describing the documentation format to the programmer (not seen by the users).</summary>
        </member>
        <member name="P:RT.CommandLine.DocumentationAttribute.OriginalText">
            <summary>Gets the original documentation string exactly as specified in the attribute.</summary>
        </member>
        <member name="M:RT.CommandLine.DocumentationAttribute.#ctor(System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.DocumentationRhoMLAttribute">
            <summary>
                Use this attribute to link a command-line option or command with the help text that describes (documents) it.
                Suitable for single-language applications only. The documentation is to be specified in <see cref="T:RT.Util.RhoML"/>, which
                is interpreted as described in <see cref="M:RT.CommandLine.CommandLineParser.Colorize(RT.Util.RhoElement)"/>. See also <see
                cref="T:RT.CommandLine.DocumentationAttribute"/>.</summary>
        </member>
        <member name="P:RT.CommandLine.DocumentationRhoMLAttribute.OriginalFormat">
            <summary>Gets a string describing the documentation format to the programmer (not seen by the users).</summary>
        </member>
        <member name="P:RT.CommandLine.DocumentationRhoMLAttribute.Text">
            <summary>
                Gets the console-colored documentation string. Note that this property may throw if the text couldn't be
                parsed where applicable.</summary>
        </member>
        <member name="M:RT.CommandLine.DocumentationRhoMLAttribute.#ctor(System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.DocumentationEggsMLAttribute">
            <summary>
                Use this attribute to link a command-line option or command with the help text that describes (documents) it.
                Suitable for single-language applications only. The documentation is to be specified in <see cref="T:RT.Util.EggsML"/>,
                which is interpreted as described in <see cref="M:RT.CommandLine.CommandLineParser.Colorize(RT.Util.EggsNode)"/>. See also <see
                cref="T:RT.CommandLine.DocumentationRhoMLAttribute"/> and <see cref="T:RT.CommandLine.DocumentationAttribute"/>.</summary>
        </member>
        <member name="P:RT.CommandLine.DocumentationEggsMLAttribute.OriginalFormat">
            <summary>Gets a string describing the documentation format to the programmer (not seen by the users).</summary>
        </member>
        <member name="P:RT.CommandLine.DocumentationEggsMLAttribute.Text">
            <summary>
                Gets the console-colored documentation string. Note that this property may throw if the text couldn't be
                parsed where applicable.</summary>
        </member>
        <member name="M:RT.CommandLine.DocumentationEggsMLAttribute.#ctor(System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.DocumentationLiteralAttribute">
            <summary>
                This is a legacy attribute. Do not use in new programs. This attribute is equivalent to <see
                cref="T:RT.CommandLine.DocumentationEggsMLAttribute"/>.</summary>
        </member>
        <member name="M:RT.CommandLine.DocumentationLiteralAttribute.#ctor(System.String)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.UndocumentedAttribute">
            <summary>
                Specifies that a specific command-line option should not be printed in help pages, i.e. the option should
                explicitly be undocumented.</summary>
        </member>
        <member name="M:RT.CommandLine.UndocumentedAttribute.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.EnumBehavior">
            <summary>Describes the behavior of an enum-typed field with the <see cref="T:RT.CommandLine.EnumOptionsAttribute"/>.</summary>
        </member>
        <member name="F:RT.CommandLine.EnumBehavior.SingleValue">
            <summary>Specifies that an enum is considered to represent a single value.</summary>
        </member>
        <member name="F:RT.CommandLine.EnumBehavior.MultipleValues">
            <summary>Specifies that an enum is considered to represent a bitfield containing multiple values.</summary>
        </member>
        <member name="T:RT.CommandLine.EnumOptionsAttribute">
            <summary>
                Specifies that a field of an enum type should be interpreted as multiple possible options, each specified by an
                <see cref="T:RT.CommandLine.OptionAttribute"/> on the enum values in the enum type.</summary>
        </member>
        <member name="M:RT.CommandLine.EnumOptionsAttribute.#ctor(RT.CommandLine.EnumBehavior)">
            <summary>Constructor.</summary>
        </member>
        <member name="P:RT.CommandLine.EnumOptionsAttribute.Behavior">
            <summary>
                Specifies whether the enum is considered to represent a single value or a bitfield containing multiple values.</summary>
        </member>
        <member name="T:RT.CommandLine.IgnoreAttribute">
            <summary>Specifies that the command-line parser should ignore a field.</summary>
        </member>
        <member name="M:RT.CommandLine.IgnoreAttribute.#ctor">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.CommandLineParseException">
            <summary>Represents any error encountered while parsing a command line. This class is abstract.</summary>
        </member>
        <member name="P:RT.CommandLine.CommandLineParseException.CommandInfo">
            <summary>Specifies the command-line type for which a help screen is to be output to the user on the console.</summary>
        </member>
        <member name="P:RT.CommandLine.CommandLineParseException.GetColoredMessage">
            <summary>Contains the error message that describes the cause of this exception.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandLineParseException.GenerateErrorText(RT.CommandLine.Translation,System.Nullable{System.Int32})">
            <summary>
                Generates a printable description of the error represented by this exception, typically used to tell the user
                what they did wrong.</summary>
            <param name="tr">
                The translation class containing the translated text, or <c>null</c> for English.</param>
            <param name="wrapWidth">
                The character width at which the output should be word-wrapped. The default (<c>null</c>) uses <see
                cref="M:RT.Util.Consoles.ConsoleUtil.WrapToWidth"/>.</param>
        </member>
        <member name="M:RT.CommandLine.CommandLineParseException.#ctor(System.Func{RT.CommandLine.Translation,RT.Util.Consoles.ConsoleColoredString},RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandLineParseException.#ctor(System.Func{RT.CommandLine.Translation,RT.Util.Consoles.ConsoleColoredString},RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandLineParseException.WriteUsageInfoToConsole(RT.Lingo.TranslationBase,RT.CommandLine.Translation,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})">
            <summary>
                Prints usage information, followed by an error message describing to the user what it was that the parser
                didn't understand.</summary>
            <param name="applicationTr">
                An object containing translations for the documentation strings. Set this to <c>null</c> only if your
                application is definitely monolingual (unlocalisable).</param>
            <param name="tr">
                Contains translations for the messages used by the command-line parser. Set this to <c>null</c> only if your
                application is definitely monolingual (unlocalisable).</param>
            <param name="helpProcessor">
                Specifies a callback which is invoked on every documentation string retrieved from the <see
                cref="T:RT.CommandLine.DocumentationAttribute"/>s to generate the help text. This callback can modify the text arbitrarily.</param>
        </member>
        <member name="M:RT.CommandLine.CommandLineParseException.GetUsageInfo(RT.Lingo.TranslationBase,RT.CommandLine.Translation,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})">
            <summary>
                Generates and returns usage information, followed by an error message describing to the user what it was that
                the parser didn't understand.</summary>
            <param name="applicationTr">
                An object containing translations for the documentation strings. Set this to <c>null</c> only if your
                application is definitely monolingual (unlocalisable).</param>
            <param name="tr">
                Contains translations for the messages used by the command-line parser. Set this to <c>null</c> only if your
                application is definitely monolingual (unlocalisable).</param>
            <param name="helpProcessor">
                Specifies a callback which is invoked on every documentation string retrieved from the <see
                cref="T:RT.CommandLine.DocumentationAttribute"/>s to generate the help text. This callback can modify the text arbitrarily.</param>
        </member>
        <member name="P:RT.CommandLine.CommandLineParseException.WriteErrorText">
            <summary>
                Determines whether <see cref="M:RT.CommandLine.CommandLineParseException.WriteUsageInfoToConsole(RT.Lingo.TranslationBase,RT.CommandLine.Translation,System.Func{RT.Util.Consoles.ConsoleColoredString,RT.Util.Consoles.ConsoleColoredString})"/> should call <see cref="M:RT.CommandLine.CommandLineParseException.GenerateErrorText(RT.CommandLine.Translation,System.Nullable{System.Int32})"/> and
                output it to the console. Default is <c>true</c>.</summary>
            <remarks>
                Only set this to <c>false</c> if the user explicitly asked to see the help screen. Otherwise its appearance
                without explanation is confusing.</remarks>
        </member>
        <member name="T:RT.CommandLine.CommandLineHelpRequestedException">
            <summary>Indicates that the user supplied one of the standard options we recognize as a help request.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandLineHelpRequestedException.#ctor(RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="P:RT.CommandLine.CommandLineHelpRequestedException.WriteErrorText">
            <summary>Overrides the base to indicate that no error message should be output along with the help screen.</summary>
        </member>
        <member name="T:RT.CommandLine.CommandLineValidationException">
            <summary>
                Specifies that the arguments specified by the user on the command-line do not pass the custom validation checks.</summary>
        </member>
        <member name="M:RT.CommandLine.CommandLineValidationException.#ctor(RT.Util.Consoles.ConsoleColoredString,RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.UnrecognizedCommandOrOptionException">
            <summary>
                Specifies that the command-line parser encountered a command or option that was not recognised (there was no <see
                cref="T:RT.CommandLine.OptionAttribute"/> or <see cref="T:RT.CommandLine.CommandNameAttribute"/> attribute with a matching option or command name).</summary>
        </member>
        <member name="P:RT.CommandLine.UnrecognizedCommandOrOptionException.CommandOrOptionName">
            <summary>The unrecognized command name or option name.</summary>
        </member>
        <member name="M:RT.CommandLine.UnrecognizedCommandOrOptionException.#ctor(System.String,RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.UnrecognizedCommandOrOptionException.#ctor(System.String,RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.IncompatibleCommandOrOptionException">
            <summary>
                Specifies that the command-line parser encountered a command or option that is not allowed in conjunction with a
                previously-encountered command or option.</summary>
        </member>
        <member name="P:RT.CommandLine.IncompatibleCommandOrOptionException.EarlierCommandOrOption">
            <summary>
                The earlier option or command, which by itself is valid, but conflicts with the <see
                cref="P:RT.CommandLine.IncompatibleCommandOrOptionException.LaterCommandOrOption"/>.</summary>
        </member>
        <member name="P:RT.CommandLine.IncompatibleCommandOrOptionException.LaterCommandOrOption">
            <summary>The later option or command, which conflicts with the <see cref="P:RT.CommandLine.IncompatibleCommandOrOptionException.EarlierCommandOrOption"/>.</summary>
        </member>
        <member name="M:RT.CommandLine.IncompatibleCommandOrOptionException.#ctor(System.String,System.String,RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.IncompatibleCommandOrOptionException.#ctor(System.String,System.String,RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.IncompleteOptionException">
            <summary>
                Specifies that the command-line parser encountered the end of the command line when it expected an argument to an
                option.</summary>
        </member>
        <member name="P:RT.CommandLine.IncompleteOptionException.OptionName">
            <summary>The name of the option that was missing an argument.</summary>
        </member>
        <member name="M:RT.CommandLine.IncompleteOptionException.#ctor(System.String,RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.IncompleteOptionException.#ctor(System.String,RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.UnexpectedArgumentException">
            <summary>
                Specifies that the command-line parser encountered additional command-line arguments when it expected the end of
                the command line.</summary>
        </member>
        <member name="P:RT.CommandLine.UnexpectedArgumentException.UnexpectedParameters">
            <summary>Contains the first unexpected argument and all of the subsequent arguments.</summary>
        </member>
        <member name="M:RT.CommandLine.UnexpectedArgumentException.#ctor(System.String[],RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.UnexpectedArgumentException.#ctor(System.String[],RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.InvalidNumericParameterException">
            <summary>
                Specifies that a parameter that expected a numerical value was passed a string by the user that doesn’t parse as a
                number.</summary>
        </member>
        <member name="P:RT.CommandLine.InvalidNumericParameterException.FieldName">
            <summary>Contains the name of the field pertaining to the parameter that was passed an invalid value.</summary>
        </member>
        <member name="M:RT.CommandLine.InvalidNumericParameterException.#ctor(System.String,RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.InvalidNumericParameterException.#ctor(System.String,RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.MissingParameterException">
            <summary>
                Specifies that the command-line parser encountered the end of the command line when it expected additional
                mandatory options.</summary>
        </member>
        <member name="P:RT.CommandLine.MissingParameterException.Field">
            <summary>Contains the field pertaining to the parameter that was missing.</summary>
        </member>
        <member name="P:RT.CommandLine.MissingParameterException.BeforeField">
            <summary>Contains an optional reference to a field which the missing parameter must precede.</summary>
        </member>
        <member name="P:RT.CommandLine.MissingParameterException.IsOption">
            <summary>
                Specifies whether the missing parameter was a missing option (true) or a missing positional parameter (false).</summary>
        </member>
        <member name="M:RT.CommandLine.MissingParameterException.#ctor(System.Reflection.FieldInfo,System.Reflection.FieldInfo,System.Boolean,RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.MissingParameterException.#ctor(System.Reflection.FieldInfo,System.Reflection.FieldInfo,System.Boolean,RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
        <member name="T:RT.CommandLine.MissingSubcommandException">
            <summary>
                Specifies that the command-line parser encountered the end of the command line when it expected a mandatory
                subcommand.</summary>
        </member>
        <member name="M:RT.CommandLine.MissingSubcommandException.#ctor(RT.CommandLine.CommandInfo)">
            <summary>Constructor.</summary>
        </member>
        <member name="M:RT.CommandLine.MissingSubcommandException.#ctor(RT.CommandLine.CommandInfo,System.Exception)">
            <summary>Constructor.</summary>
        </member>
    </members>
</doc>
